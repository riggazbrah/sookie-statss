
{
  "name": "sookies-stats",
 // Sookie‚Äôs Stat‚Äôs ‚Äî full Expo app with all requested features

import React, { useState, useEffect } from 'react';
import {
  View, Text, TextInput, Button, Image, ScrollView,
  StyleSheet, TouchableOpacity, Alert, Platform,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as ImagePicker from 'expo-image-picker';
import * as Notifications from 'expo-notifications';

export default function App() {
  const [entries, setEntries] = useState([]);
  const [note, setNote] = useState('');
  const [image, setImage] = useState(null);
  const [editIndex, setEditIndex] = useState(null);
  const [category, setCategory] = useState('Medical');

  useEffect(() => {
    loadEntries();
    requestPermissions();
    scheduleReminder();
  }, []);

  const requestPermissions = async () => {
    await Notifications.requestPermissionsAsync();
    if (Platform.OS === 'android') {
      await 

Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.DEFAULT,
      });
    }
  };

  const scheduleReminder = async () => {
    await Notifications.cancelAllScheduledNotificationsAsync();
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "üê∂ Sookie‚Äôs Stat‚Äôs",
        body: 'Time to update Sookie‚Äôs care log!',
      },
      trigger: { hour: 20, minute: 0, repeats: 

true },
    });
  };

  const loadEntries = async () => {
    const stored = await AsyncStorage.getItem('sookieStats');
    if (stored) setEntries(JSON.parse(stored));
  };

  const saveEntries = async (newEntries) => {
    await AsyncStorage.setItem('sookieStats', JSON.stringify(newEntries));
  };

  const handleAddOrUpdate = () => {
    if (!note && !image) return;
    const newEntry = { note, image, category, timestamp: new 

Date().toISOString() };
    const updated = editIndex !== null
      ? entries.map((e, i) => i === editIndex ? newEntry : e)
      : [newEntry, ...entries];
    setEntries(updated);
    saveEntries(updated);
    setNote('');
    setImage(null);
    setCategory('Medical');
    setEditIndex(null);
  };

  const handleDelete = (idx) => {
    Alert.alert('Delete this entry?', '', [
      { text: 'Cancel' },
      { text: 'Delete', style: 'destructive', onPress: () => {
          const updated = entries.filter((_, i) => i !== idx);
          setEntries(updated);
          saveEntries(updated);

        }
      },
    ]);
  };

  const handleEdit = (idx) => {
    const e = entries[idx];
    setNote(e.note);
    setImage(e.image);
    setCategory(e.category);
    setEditIndex(idx);
  };

  const pickImage = async () => {
    const res = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
    });
    if (!res.canceled) setImage(res.uri);
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>üê∂ Sookie‚Äôs Stat‚Äôs</Text>

      <TextInput
        style={styles.input}
        placeholder="Category (Medical, Weight, Toilet, Medication)"
        value={category} onChangeText={setCategory}
      />
      <TextInput
        style={styles.input}
        placeholder="Details (weight, notes, etc.)"
        value={note} onChangeText={setNote}
      />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <View style={styles.buttons}>
        <Button title="Pick Photo" 

onPress={pickImage} />
        <Button title={editIndex !== null ? "Update" : "Add Entry"} onPress={handleAddOrUpdate} />
      </View>

      {entries.map((e, i) => (
        <View key={i} style={styles.entry}>
          <Text style={styles.date}>{new Date(e.timestamp).toLocaleString()}</Text>
          <Text style={styles.category}>{e.category}</Text>
          {e.image && <Image source={{ uri: e.image }} style={styles.thumbnail} />}
          <Text>{e.note}</Text>
          <View style={styles.row}>
            <Button title="Edit" onPress={() => handleEdit(i)} />
            <Button title="Delete" color="red" onPress={() => handleDelete(i)} />
          </View>

        </View>
      ))}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { paddingTop: 40, padding: 20, backgroundColor: '#f4efff', flex: 1 },
  header: { fontSize: 28, textAlign: 'center', marginBottom: 20, color: '#6a1b9a', fontWeight: 'bold' },
  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, borderRadius: 8, marginVertical: 5, backgroundColor: '#fff' },
  buttons: { flexDirection: 'row', justifyContent: 'space-between', marginVertical: 10 },
  image: { width: '100%', height: 200, marginBottom: 10, borderRadius: 10 },
  entry: { backgroundColor: '#fff', 

padding: 15, marginVertical: 10, borderRadius: 10 },
  date: { color: '#666', fontSize: 12, marginBottom: 4 },
  category: { fontWeight: 'bold', marginBottom: 5, color: '#4a148c' },
  thumbnail: { width: 100, height: 100, marginBottom: 5, borderRadius: 8 },
  row: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 5 },
}); 
